{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/api.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","postId","setPostId","posts","className","map","post","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setComments","POST_ID","setCommentError","comments","useState","isLoading","setIsLoading","name","email","formData","setFormData","formError","setFormError","handleChange","e","target","value","prev","onSubmit","event","preventDefault","trim","prevFormError","createComment","newItem","prevData","catch","finally","onReset","htmlFor","placeholder","onChange","PostDetails","postError","setPostError","commentError","isWriteClicked","setIsWriteClicked","find","item","useEffect","getComments","removeComment","CommentId","index","findIndex","elem","newComments","splice","length","comment","href","UserSelector","users","userId","setUserId","isOpen","setIsOpen","selectedUser","role","user","App","setUsers","postsError","SetPostsError","setPosts","getPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eae8cfb4.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  postId: number,\n  setPostId: (arg: number) => void,\n  posts: Post[] | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  postId, setPostId, posts,\n}) => {\n  const handleClick = (id: number) => {\n    if (postId === id) {\n      setPostId(0);\n    } else {\n      setPostId(id);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts?.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': postId !== post.id,\n                  })}\n                  onClick={() => handleClick(post.id)}\n                >\n                  {postId !== post.id\n                    ? 'Open'\n                    : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { createComment } from '../api/api';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  setComments: (arg: Comment[]) => void,\n  POST_ID: number,\n  setCommentError: (arg: boolean) => void,\n  comments: Comment[] | null,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setComments, POST_ID, setCommentError, comments,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const [formError, setFormError] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n    setFormError({\n      name: false,\n      email: false,\n      body: false,\n    });\n    if (!formData.name.trim()) {\n      setFormError((prevFormError) => ({ ...prevFormError, name: true }));\n      setIsLoading(false);\n    }\n\n    if (!formData.email.trim()) {\n      setFormError((prevFormError) => ({ ...prevFormError, email: true }));\n      setIsLoading(false);\n    }\n\n    if (!formData.body.trim()) {\n      setFormError((prevFormError) => ({ ...prevFormError, body: true }));\n      setIsLoading(false);\n    } else {\n      createComment({\n        postId: POST_ID,\n        body: formData.body.trim(),\n        name: formData.name.trim(),\n        email: formData.email.trim(),\n      })\n        .then((newItem: Comment) => {\n          if (comments) {\n            setComments([...comments, newItem]);\n          } else {\n            setComments([newItem]);\n          }\n\n          setFormData(prevData => ({\n            ...prevData,\n            body: '',\n          }));\n        })\n        .catch(() => {\n          setCommentError(true);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  };\n\n  const handleReset = (event: React.FormEvent) => {\n    event.preventDefault();\n    setFormData({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': formError.name,\n            })}\n            value={formData.name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {formError.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n        {formError.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': formError.email,\n            })}\n            value={formData.email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {formError.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n        {formError.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': formError.body,\n            })}\n            value={formData.body}\n            onChange={handleChange}\n          />\n        </div>\n        {formError.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComments = (CommentId: number) => {\n  return client.delete(`/comments/${CommentId}`) as Promise<void>;\n};\n\nexport const createComment = ({\n  postId, body, name, email,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId, body, name, email,\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { deleteComments, getComments } from '../api/api';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  postId: number,\n  posts: Post[] | null,\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId, posts }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [comments, setComments]\n    = useState<Comment[] | null>(null);\n  const [postError, setPostError] = useState(false);\n  const [commentError, setCommentError] = useState(false);\n  const [isWriteClicked, setIsWriteClicked] = useState(false);\n\n  const post = posts?.find(item => item.id === postId);\n\n  useEffect(() => {\n    setPostError(false);\n    setIsLoading(true);\n\n    getComments(postId)\n      .then(setComments)\n      .catch(() => {\n        setPostError(true);\n      })\n      .finally(() => setIsLoading(false));\n  }, [postId]);\n\n  const removeComment = (id: number) => {\n    setIsLoading(true);\n\n    deleteComments(id)\n      .then(() => {\n        const index = comments?.findIndex(elem => elem.id === id);\n\n        if (index && index !== -1 && comments) {\n          const newComments = [...comments];\n\n          newComments.splice(index, 1);\n          setComments(newComments);\n        }\n      })\n      .catch(() => {\n        setPostError(true);\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {(postError || commentError) && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments?.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          <p className=\"title is-4\">Comments:</p>\n\n          {comments?.map(comment => (\n            <article\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n              key={comment.id}\n            >\n              <div className=\"message-header\">\n                <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => removeComment(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n\n          {!isWriteClicked && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsWriteClicked(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isWriteClicked && (\n          <NewCommentForm\n            setComments={setComments}\n            POST_ID={postId}\n            setCommentError={setCommentError}\n            comments={comments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  userId: number,\n  setUserId: (arg: number) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({ users, userId, setUserId }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const selectedUser = users?.find(item => item.id === userId);\n\n  return (\n    <>\n\n      <div\n        data-cy=\"UserSelector\"\n        className={classNames('dropdown', {\n          'is-active': isOpen,\n        })}\n      >\n        <div className=\"dropdown-trigger\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            aria-haspopup=\"true\"\n            aria-controls=\"dropdown-menu\"\n            onClick={() => setIsOpen(!isOpen)}\n          >\n            <span>\n              {userId\n                ? selectedUser?.name\n                : 'Choose a user'}\n            </span>\n\n            <span className=\"icon is-small\">\n              <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n            </span>\n          </button>\n        </div>\n\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                key={user.id}\n                onClick={() => {\n                  setUserId(user.id);\n                  setIsOpen(false);\n                }}\n                className={classNames('dropdown-item', {\n                  'is-active': userId === user.id,\n                })}\n              >\n                {user.name}\n              </a>\n            ))}\n\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getPosts, getUsers } from './api/api';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [userId, setUserId] = useState(0);\n  const [postId, setPostId] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [postsError, SetPostsError] = useState(false);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    SetPostsError(false);\n    setIsLoading(true);\n\n    getPosts(userId)\n      .then(setPosts)\n      .catch(() => {\n        SetPostsError(true);\n      })\n      .finally(() => setIsLoading(false));\n  }, [userId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  userId={userId}\n                  setUserId={setUserId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!userId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && userId > 0 && <Loader />}\n\n                {postsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts?.length === 0 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {userId > 0 && (\n                  <PostsList\n                    postId={postId}\n                    setPostId={setPostId}\n                    posts={posts}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {postId > 0 && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  postId={postId}\n                  posts={posts}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}